"""
This file was autogenerated by pybind11-stubs, and then modified manually to fix
some errors and improve readability.
"""
from __future__ import annotations
import numpy as np
import numpy.typing as npt
from .types import *
from typing import Callable, overload

__version__: str
__all__ = ['__doc__', '__version__', 'py_load', 'PyDataFrame',
           'Euler', 'Euler_Scal', 'Midpoint', 'Midpoint_Scal',
             'ODE_Scal', 'ODE_Vec', 'RK4', 'RK4_Scal']
class Euler(ODE_Vec):
    def __init__(self, arg0: sup_fun_vec, arg1: sup_vec, 
                 arg2: float, arg3: float) -> None:
        ...
class Euler_Scal(ODE_Scal):
    def __init__(self, arg0: sup_fun_scal, arg1: float,
                  arg2: float, arg3: float) -> None:
        ...
class Midpoint(ODE_Vec):
    def __init__(self, arg0: sup_fun_vec, arg1: sup_vec,
                  arg2: float, arg3: float) -> None:
        ...
class Midpoint_Scal(ODE_Scal):
    def __init__(self, arg0: sup_fun_scal, arg1: float,
                  arg2: float, arg3: float) -> None:
        ...
class RK4(ODE_Vec):
    def __init__(self, arg0: sup_fun_vec, arg1: sup_vec, 
                 arg2: float, arg3: float) -> None:
        ...
class RK4_Scal(ODE_Scal):
    def __init__(self, arg0: sup_fun_scal, arg1: float, 
                 arg2: float, arg3: float) -> None:
        ...
class ODE_Scal:
    def ode(self) -> sup_vec:
        ...
class ODE_Vec:
    def ode(self) -> sup_vec:
        ...
class PyDataFrame:
    def __call__(self, arg0: str) -> sup_col_arr_types:
        ...
    def __getitem__(self, col_idx: int) -> sup_col_arr_types:
        ...
    def __getstate__(self) -> tuple[sup_col_arr_types, all_cat_dict, list[str]]:
        ...
    @overload
    def __init__(self) -> None:
        ...
    @overload
    def __init__(self, data: sup_multi_row_types,
                 labels: list[str] | None = None) -> None:
        """
        Parameters
        ----------
        data : list[SUP_ROW_TYPES] or list[list[SUP_ROW_TYPES]], optional
        labels : list[str], optional
        """
    def __repr__(self) -> str:
        ...
    def __setitem__(self, arg0: int, arg1: sup_col_arr_types) -> None:
        ...
    def __setstate__(self, arg0: tuple[sup_col_arr_types, all_cat_dict,
                                       list[str]]) -> None:
        ...
    def append_column(self, col: sup_col_arr_types,
                      label: str | None = None) -> None:
        """
        Append a column to the DataFrame. Must have a correct amount of
        rows.
        
        Parameters
        ----------
        col : numpy.ndarray
            Must be a column vector i.e. shape=(x, 1)
        label : Optional[str]
        """
    def append_row(self, row: sup_row_types) -> None:
        """
        Append a row to the DataFrame. Must have a correct amount of
        columns and the data types must match the current column dtypes.
        
        Parameters
        ----------
        row : list or list[list] or numpy.ndarray
            A list with len 3 has 3 columns.
        """
    def get_map(self, idx: int | str) -> cat_dict:
        """
        Get the integer label map for some column (if there is a mapping).
        
        Parameters
        ----------
        idx : int or str
            The index or label of the column from which you want to get a map.
        
        Returns
        -------
        col_cat_map : dict[int, str]
        """
    def find_label(self, label: str) -> int:
        """
        Get the column index for a label.

        Returns
        -------
        idx : int
        """
    def insert_column(self, col: sup_col_arr_types, idx: int,
                      label: str | None = None) -> None:
        """
        Insert a column into the DataFrame.
        
        Parameters
        ----------
        col : numpy.ndarray
        idx : unsigned int
        label : string, optional
        """
    def insert_row(self, row: sup_row_types, idx: int) -> None:
        """
        Insert a row into the DataFrame.
        
        Parameters
        ----------
        row : list
        idx : unsigned int
        """
    def set_map(self, idx: int, map: cat_dict) -> None:
        """
        Set an integer-string mapping for a specific column.
        
        Parameters
        ----------
        idx : unsigned int
        map : dict[int, str]
        """
    def summarize(self) -> None:
        """
        Print a summary of the DataFrame.
        """
    def view(self, idx: int | str) -> sup_col_arr_types:
        """
        Get a view into a column. This is much faster than indexing the dataframe
        because the column memory is not copied. This does mean however that the
        returned Numpy array is read-only.
        
        Parameters
        ----------
        idx : unsigned int or string
        
        Returns
        -------
        col : numpy.ndarray
            A read-only numpy array.
        """
    @property
    def cat_map(self) -> all_cat_dict:
        """
        Get all integer label maps for all columns.
        
        Returns
        -------
        all_cat_maps : dict[int, dict[int, str]]
            Where the outer dict maps column idx to category maps.
        """
    @cat_map.setter
    def cat_map(self, arg1: all_cat_dict) -> None:
        ...
    @property
    def column_labels(self) -> list[str] | None:
        """
        The labels for each column if they are present. When setting the
        labels, there must be a label for each column.
        
        Returns
        -------
        column_labels : list[str]
        """
    @column_labels.setter
    def column_labels(self, arg1: list[str]) -> None:
        ...
    @property
    def shape(self) -> tuple[int, int]:
        """
        Number of rows and columns in the DataFrame.
        
        Returns
        -------
        shape : tuple[int, int]
        """
@overload
def py_load(filepath: str,
         dataframe: PyDataFrame,
         header: bool | None = None,
         columns: list[int] | None = None,
         col_types: list[Callable[[str], sup_row_types]] | None = None,
         newline_delimiter: str | None = None,
         column_delimiter: str | None = None) -> list[str]:
    """
    Load a CSV file into a DataFrame object.
    
    Parameters
    ----------
    filepath : str
    dataframe : :class:`.PyDataFrame`, optional
    header : bool
        Whether the CSV file has a header.
    columns : list[int], optional
        What specific columns should be loaded from the file.
    col_types : list[Callable[Any, str]]
        A list of functions to be used when converting strings to numeric types.
    newline_delimiter : str
    column_delimiter : str
    
    Returns
    -------
    types : list[str]
        The column types that were autodetected when loading the CSV.
    """
@overload
def py_load(filepath: str, header: bool | None = None,
         columns: list[int] | None = None,
         col_types: list[Callable[[str], sup_row_types]] | None = None,
         newline_delimiter: str | None = None,
         column_delimiter: str | None = None) -> tuple[list[str], PyDataFrame]:
    """
    Load a CSV into a new DataFrame

    Returns
    -------
    types : list[str]
        The column types that were autodetected when loading the CSV.
    df : :class:`.PyDataFrame`
    """
